# Esri start of added imports
import sys, os, arcpy

# Esri end of added imports

# Esri start of added variables
g_ESRI_variable_1 = u'in_memory\\PALO_MUIF'
g_ESRI_variable_2 = u'PALO_SELECT'
g_ESRI_variable_3 = u'in_memory\\INFR_RT_ESTENSIONE_P'
g_ESRI_variable_4 = u'CLASSID'
g_ESRI_variable_5 = u'CLASSREF'
g_ESRI_variable_6 = u'!CLASSID!'
g_ESRI_variable_7 = u'!CLASSREF!'
g_ESRI_variable_8 = u'DATA_INI'
g_ESRI_variable_9 = u'!DATA_INIZ!'
g_ESRI_variable_10 = u'FONTE'
g_ESRI_variable_11 = u"'03'"
g_ESRI_variable_12 = u'INFR_RT_PC'
g_ESRI_variable_13 = u"'01008081000'"
g_ESRI_variable_14 = u'INFR_RT_ST'
g_ESRI_variable_15 = u"'01'"
g_ESRI_variable_16 = u'INFR_RT_UT'
g_ESRI_variable_17 = u"'0202'"
g_ESRI_variable_18 = u'SCALA'
g_ESRI_variable_19 = u"'04'"
g_ESRI_variable_20 = u'INFR_RT_TR'
g_ESRI_variable_21 = u'INFR_RT_TY'
g_ESRI_variable_22 = u"'09'"
g_ESRI_variable_23 = u'in_memory/INFR_RT'
g_ESRI_variable_24 = u'PRES_3D;RIF_ID;DATA_AG;STATO_AG;DTP;CLASSREF_1;CLASSID;DATA_AE;SCALA_R;ASSET;DATA_TR;ID_ASSET;PALO_IMP;PALO_QMAX;LOTTO;ORIGINE;STATO;DATA_INIZ;DATA_FINE;CREATO;DATA_CREA;MOD;DATA_MOD;CLASSID_1;DATA_FIN;DATA_INI;FONTE;SCALA;INFR_RT_PC;INFR_RT_ST;INFR_RT_UT;INFR_RT_TR;CLASSREF_2;INFR_RT_TY'
g_ESRI_variable_25 = u'in_memory\\INFR_RT_INFR_RT_TR'
g_ESRI_variable_26 = u'in_memory\\INFR_RT_INFR_RT_TY'
g_ESRI_variable_27 = u'PRES_3D;RIF_ID;DATA_AG;STATO_AG;DTP;CLASSREF_1;DATA_AE;SCALA_R;ASSET;DATA_TR;ID_ASSET;PALO_IMP;PALO_QMAX;LOTTO;ORIGINE;STATO;DATA_INIZ;DATA_FINE;CREATO;DATA_CREA;MOD;DATA_MOD;CLASSREF;CLASSID_1;INFR_RT_TR;CLASSREF_2;INFR_RT_TY'
g_ESRI_variable_28 = u'PRES_3D;RIF_ID;DATA_AG;STATO_AG;DTP;CLASSREF_1;CLASSID;DATA_AE;SCALA_R;ASSET;DATA_TR;ID_ASSET;PALO_IMP;PALO_QMAX;LOTTO;ORIGINE;STATO;DATA_INIZ;DATA_FINE;CREATO;DATA_CREA;MOD;DATA_MOD;CLASSID_1;DATA_FIN;DATA_INI;FONTE;SCALA;INFR_RT_PC;INFR_RT_ST;INFR_RT_UT;CLASSREF_2;INFR_RT_TY'
g_ESRI_variable_29 = u'PRES_3D;RIF_ID;DATA_AG;STATO_AG;DTP;CLASSREF_1;CLASSID;DATA_AE;SCALA_R;ASSET;DATA_TR;ID_ASSET;PALO_IMP;PALO_QMAX;LOTTO;ORIGINE;STATO;DATA_INIZ;DATA_FINE;CREATO;DATA_CREA;MOD;DATA_MOD;CLASSID_1;DATA_FIN;DATA_INI;FONTE;SCALA;INFR_RT_PC;INFR_RT_ST;INFR_RT_UT;INFR_RT_TR;CLASSREF_2'
g_ESRI_variable_30 = u'in_memory\\FC_INFR_RT_ESTESIONE_P_SIMS'
g_ESRI_variable_31 = u'INFR_RT_FARLOCCO'
g_ESRI_variable_32 = u'INFR_RT_SIMS_INE'
g_ESRI_variable_33 = u'DTP_SELECT'
g_ESRI_variable_34 = u'in_memory\\DTP_SELECTED'
g_ESRI_variable_35 = u'DTP'
g_ESRI_variable_36 = u'in_memory\\INFR_RT_ESTENSIONE_P_SIMS_selected'
g_ESRI_variable_37 = u'INFR_RT_ESTENSIONE_P_SIMS_layer'
g_ESRI_variable_38 = u'in_memory\\INFR_RT_ESTENSIONE_P_SIMS'
g_ESRI_variable_39 = u"'070001_'+str(autoIncrement() )"
g_ESRI_variable_40 = u'CLASSREF_1'
g_ESRI_variable_41 = u'INFR_RT'
g_ESRI_variable_42 = u'in_memory\\INFR_RT_SIMS'
g_ESRI_variable_68 = u'\\\\rfiappmuf17le.rfiservizi.corp\\agsgeoproc\\SINFI\\connessioni'
g_ESRI_variable_44 = u'SETE'
g_ESRI_variable_45 = u'KM_INI'
g_ESRI_variable_46 = u'KM_FIN'
g_ESRI_variable_47 = u'ROUTE_BIN_C_Layer'
g_ESRI_variable_48 = u'in_memory/CREATE_ROUTES'
g_ESRI_variable_49 = u'Risultato_segmentazione'
g_ESRI_variable_50 = u'in_memory\\ROUTE_BIN_C'
g_ESRI_variable_51 = u'in_memory\\V_ASSET_S16000'
g_ESRI_variable_52 = u'SEDE_TECNICA'
g_ESRI_variable_53 = u'SEDE_TECNICA;KM_INI;KM_FIN;S16000_0010'
g_ESRI_variable_54 = u"S16000_0010 = '3' OR S16000_0010= '2'"
g_ESRI_variable_55 = u'in_memory\\ROUTE_BIN_C_Select'
g_ESRI_variable_56 = u'%scratchFolder%\\Risultato_segmentazione_test.shp'
g_ESRI_variable_57 = u'\\\\rfiappmuf17le.rfiservizi.corp\\agsgeoproc\\SINFI\\connessioni\\Risultato_segmentazione.shp'
g_ESRI_variable_58 = u'in_memory/INFR_RT_ESTENSIONE_L'
g_ESRI_variable_59 = u"'070002_'+str(autoIncrement() )"
g_ESRI_variable_60 = u'datetime.datetime.now( )'
g_ESRI_variable_61 = u'in_memory\\INFR_RT_DBF'
g_ESRI_variable_62 = u'CLASSID_1;CLASSID;DATA_FIN;DATA_INI;FONTE;SCALA;INFR_RT_PC;INFR_RT_ST;INFR_RT_UT;INFR_RT_TR;INFR_RT_TY;Field1;SEDE_TEC;SETE;KM_INIZIO;KM_FINE;DISTANZA;LATO_DI_PO;ORIG_FID;BINARIO;CLASSREF_1;CLASSREF_2'
g_ESRI_variable_63 = u'in_memory\\meta_memory'
g_ESRI_variable_64 = u'OBJECTID'
g_ESRI_variable_65 = u'SHAPE_LEN'
g_ESRI_variable_66 = u'\\\\rfiappmuf17le.rfiservizi.corp\\agsgeoproc\\SINFI\\connessioni\\event_table.dbf'
g_ESRI_variable_67 = u'\\\\rfiappmuf17le.rfiservizi.corp\\agsgeoproc\\SINFI\\Elaborazioni\\INFR_RT'
g_ESRI_variable_69 = u'\\\\rfiappmuf17le.rfiservizi.corp\\agsgeoproc\\SINFI\\csv_cavidotti\\Export_AssetS01500.csv'
g_ESRI_variable_70 = u'in_memory/MUIF_V_ASSET'
g_ESRI_variable_71 = u'in_memory/MUIF_ROUTE_BIN_C'
# Esri end of added variables

# -*- #################
# ---------------------------------------------------------------------------
# INFR_RT_script.py
# Created on: 2020-12-02 10:48:31.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
# import openpyxl
import json
import csv
import os
import logging
import traceback
from logging import handlers


# ------- FUNZIONE CHE RESTITUISCE LA LISTA DELLE DTP COMPLETE SUL MUIF (PRODUZIONE) -------

def VerificaDTPComplete_MUIF(dictNumeroLotti, fc_loc):
    try:
        fields = 'LOTTO'
        listaLotti = []
        with arcpy.da.SearchCursor(fc_loc, fields) as cursor:
            for row in cursor:
                listaLotti.append(row[0])
        listaLotti = list(set(listaLotti))

        listaDTPComplete = []
        for dtp, num_lotti in dictNumeroLotti.items():
            lista_conteggio = []
            for lotto in listaLotti:
                if dtp == lotto[0:4]:
                    lista_conteggio.append(lotto)
            if len(lista_conteggio) == num_lotti:
                listaDTPComplete.append(dtp)

        return listaDTPComplete
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore in verifica DTP COMPLETE' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error(
            'Errore in verifica DTP COMPLETE' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


def trovo_dtp_mancanti(lista_dtp_complete, lista_dtp):
    try:
        dtp_mancanti = []
        for x in lista_dtp_complete:
            z = False
            for y in lista_dtp:
                if x == y:
                    z = True
            if z == False:
                dtp_mancanti.append(x)
            # arcpy.AddMessage(dtp_mancanti)
        return dtp_mancanti
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore in trovo DTP mancanti' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error(
            'Errore in trovo DTP mancanti' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


def trovo_valore_max(INFR_RT_ESTENSIONE_P__shp):
    try:
        fields = g_ESRI_variable_5
        lista_id = []
        with arcpy.da.SearchCursor(INFR_RT_ESTENSIONE_P__shp, fields) as cursor:
            indice = 0
            for row in cursor:
                classid = row[0].split("_")
                if int(indice) < int(classid[1]):
                    indice = classid[1]
        arcpy.AddMessage(indice)
        return indice
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore in trovo valore max' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error(
            'Errore in trovo valore max' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


def deletetxt(path, logger):
    try:
        directory = os.chdir(path)
        file_da_rimuovere = [name for name in os.listdir(path) if
                             name.endswith(".xml") or name.endswith(".CPG") or name.endswith(".sbx") or name.endswith(
                                 ".cpg") or name.endswith(".sbn")]
        for f in file_da_rimuovere:
            # arcpy.AddMessage(f)
            os.remove(f)
        logger.info('deletetxt: completed')
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error('Errore in deleteTXT' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error('Errore in deleteTXT' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


def INFR_RT_MUIF(lista_dtp, PATH_FC_PALO, INFR_RT_ESTENSIONE_P_shp, INFR_RT_dbf, INFR_RT_INFR_RT_TR_dbf,
                 INFR_RT_INFR_RT_TY_dbf):
    try:

        # -------------------------------
        # arcpy.FeatureClassToShapefile_conversion(COLLAUDO_PALO,Appoggio)
        FC_PALO_MUIF = arcpy.CopyFeatures_management(PATH_FC_PALO, g_ESRI_variable_1)
        # seleziono dtp complete muif
        PALO_SELECT = arcpy.MakeFeatureLayer_management(FC_PALO_MUIF, g_ESRI_variable_2)
        for x in lista_dtp:
            arcpy.SelectLayerByAttribute_management(PALO_SELECT, "ADD_TO_SELECTION",
                                                    " \"LOTTO\" LIKE " + "'" + x + "%' AND \"PALO_IMP\" = '01'")
        # Process:Feature Class To Shapefile (multiple)
        PALO_MUIF = arcpy.CopyFeatures_management(PALO_SELECT, g_ESRI_variable_3)
        # -----------------------------------

        # Process: Select
        # arcpy.Select_analysis(PALO_SELECT, PALO_MUIF_shp, "PALO_IMP = '01'")

        # Process: Join Field
        arcpy.JoinField_management(PALO_MUIF, g_ESRI_variable_4, INFR_RT_ESTENSIONE_P_shp, g_ESRI_variable_5, "")

        # Process: CLASS_REF
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_5, g_ESRI_variable_6, "PYTHON_9.3", "")

        # Process: Join Field (2)
        arcpy.JoinField_management(PALO_MUIF, g_ESRI_variable_4, INFR_RT_dbf, g_ESRI_variable_4, "")

        # Process: Join Field (3)
        arcpy.JoinField_management(PALO_MUIF, g_ESRI_variable_5, INFR_RT_INFR_RT_TR_dbf, g_ESRI_variable_5, "")

        # Process: Join Field (4)
        arcpy.JoinField_management(PALO_MUIF, g_ESRI_variable_5, INFR_RT_INFR_RT_TY_dbf, g_ESRI_variable_5, "")

        # Process: Calculate Field
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_4, g_ESRI_variable_7, "PYTHON_9.3", "")

        # Process: Calculate Field (11)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_8, g_ESRI_variable_9, "PYTHON_9.3", "")

        # Process: Calculate Field (10)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_10, g_ESRI_variable_11, "PYTHON_9.3", "")

        # Process: Calculate Field (9)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_12, g_ESRI_variable_13, "PYTHON_9.3", "")

        # Process: Calculate Field (8)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_14, g_ESRI_variable_15, "PYTHON_9.3", "")

        # Process: Calculate Field (7)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_16, g_ESRI_variable_17, "PYTHON_9.3", "")

        # Process: Calculate Field (6)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_18, g_ESRI_variable_19, "PYTHON_9.3", "")

        # Process: Calculate Field (5)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_20, g_ESRI_variable_11, "PYTHON_9.3", "")

        # Process: Calculate Field (4)
        arcpy.CalculateField_management(PALO_MUIF, g_ESRI_variable_21, g_ESRI_variable_22, "PYTHON_9.3", "")

        # Process: Table To Geodatabase (multiple)
        INFR_RT = arcpy.management.CopyRows(PALO_MUIF, g_ESRI_variable_23)
        # arcpy.AddMessage(INFR_RT)

        # Process: Delete Field
        arcpy.DeleteField_management(PALO_MUIF, g_ESRI_variable_24)

        INFR_RT_INFR_RT_TR = arcpy.management.CopyRows(INFR_RT, g_ESRI_variable_25)
        INFR_RT_INFR_RT_TY = arcpy.management.CopyRows(INFR_RT, g_ESRI_variable_26)
        # Process: Delete Field (2)
        arcpy.DeleteField_management(INFR_RT, g_ESRI_variable_27)

        # Process: Delete Field (3)
        arcpy.DeleteField_management(INFR_RT_INFR_RT_TR, g_ESRI_variable_28)

        # Process: Delete Field (4)
        arcpy.DeleteField_management(INFR_RT_INFR_RT_TY, g_ESRI_variable_29)

        result = [PALO_MUIF, INFR_RT, INFR_RT_INFR_RT_TR, INFR_RT_INFR_RT_TY]
        return result
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error('Errore nella produzione di INFR_RT_MUIF' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                              exc_tb.tb_lineno))
        logger.error('Errore nella produzione di INFR_RT_MUIF' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                             exc_tb.tb_lineno))
        sys.exit(1)


def INFR_RT_SIMS_INE(INFR_RT_SIMS, INFR_RT_ESTENSIONE_P_SIMS, INFR_RT_INFR_RT_TR_SIMS, INFR_RT_INFR_RT_TY_SIMS, DTP_shp,
                     n_id, dtp_mancanti):
    try:
        FC_INFR_RT_ESTESIONE_P_SIMS = arcpy.CopyFeatures_management(INFR_RT_ESTENSIONE_P_SIMS, g_ESRI_variable_30)
        INFR_RT_FARLOCCO = arcpy.MakeFeatureLayer_management(FC_INFR_RT_ESTESIONE_P_SIMS, g_ESRI_variable_31)
        arcpy.JoinField_management(INFR_RT_FARLOCCO, g_ESRI_variable_5, INFR_RT_INFR_RT_TR_SIMS, g_ESRI_variable_5)
        arcpy.JoinField_management(INFR_RT_FARLOCCO, g_ESRI_variable_5, INFR_RT_INFR_RT_TY_SIMS, g_ESRI_variable_5)
        arcpy.JoinField_management(INFR_RT_FARLOCCO, g_ESRI_variable_5, INFR_RT_SIMS, g_ESRI_variable_4)
        INFR_RT_SIMS_INE = arcpy.MakeFeatureLayer_management(INFR_RT_FARLOCCO, g_ESRI_variable_32)
        DTP_SELECT = arcpy.MakeFeatureLayer_management(DTP_shp, g_ESRI_variable_33)
        for x in dtp_mancanti:
            arcpy.SelectLayerByAttribute_management(DTP_SELECT, "ADD_TO_SELECTION",
                                                    " \"DIVPLANIFM\" = " + "'" + x + "'")
        DTP_SELECTED = arcpy.CopyFeatures_management(DTP_SELECT, g_ESRI_variable_34)
        DTP = arcpy.MakeFeatureLayer_management(DTP_SELECTED, g_ESRI_variable_35)
        INFR_RT_ESTENSIONE_P_SIMS_selected = arcpy.SpatialJoin_analysis(INFR_RT_SIMS_INE, DTP, g_ESRI_variable_36)
        INFR_RT_ESTENSIONE_P_SIMS_layer = arcpy.MakeFeatureLayer_management(INFR_RT_ESTENSIONE_P_SIMS_selected,
                                                                            g_ESRI_variable_37)
        arcpy.SelectLayerByAttribute_management(INFR_RT_ESTENSIONE_P_SIMS_layer, "NEW_SELECTION",
                                                " \"DIVPLANIFM\" <> " + "' '")
        INFR_RT_ESTENSIONE_P_SIMS = arcpy.CopyFeatures_management(INFR_RT_ESTENSIONE_P_SIMS_layer, g_ESRI_variable_38)
        # arcpy.AddMessage(n_id)
        arcpy.CalculateField_management(INFR_RT_ESTENSIONE_P_SIMS, g_ESRI_variable_5, g_ESRI_variable_39, "PYTHON_9.3",
                                        "i =0" + "\\ndef autoIncrement():\\n   global i;\\n   iStart = 1\\n   iInterval = 1\\n   if( i == 0 ):\\n      i = iStart\\n   else:\\n     i=i+ iInterval\\n   return i")
        # arcpy.AddMessage(n_id)
        arcpy.CalculateField_management(INFR_RT_ESTENSIONE_P_SIMS, g_ESRI_variable_4, g_ESRI_variable_7, "PYTHON_9.3",
                                        "")
        arcpy.DeleteField_management(INFR_RT_ESTENSIONE_P_SIMS, g_ESRI_variable_40)
        INFR_RT = arcpy.MakeFeatureLayer_management(INFR_RT_ESTENSIONE_P_SIMS, g_ESRI_variable_41)
        INFR_RT_SIMS = arcpy.management.CopyRows(INFR_RT, g_ESRI_variable_42)
        n_id = trovo_valore_max(INFR_RT_ESTENSIONE_P_SIMS)
        # arcpy.AddMessage(n_id)
        result = [INFR_RT_SIMS, INFR_RT_ESTENSIONE_P_SIMS, n_id]
        return result
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore in INFR_RT_SIMS_INE' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error(
            'Errore in INFR_RT_SIMS_INE' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


# -------------------- Create event table----------------
def controllo_distanza(sede_tecnica, media_km, path_csv):
    with open(path_csv, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=';')
        for riga in csv_reader:
            try:
                KM_FINE = riga['Punto finale SI'].replace(',', '.')
                KM_INI = riga['Punto iniziale SI'].replace(',', '.')
                if float(KM_FINE) > float(KM_INI):
                    if riga["Sede Tecnica"] == sede_tecnica and riga[
                        'Codice caratteristica'] == 'S01500_0030' and float(media_km) < float(KM_FINE) and float(
                            media_km) > float(KM_INI):
                        return riga['Valore car. Numerico']
                elif float(KM_FINE) < float(KM_INI):
                    if riga["Sede Tecnica"] == sede_tecnica and riga[
                        'Codice caratteristica'] == 'S01500_0030' and media_km > float(KM_FINE) and media_km < float(
                            KM_INI):
                        return riga['Valore car. Numerico']
            except:
                arcpy.AddMessage(sys.exc_info()[0])
                return sede_tecnica


def controllo_binario(sede_tecnica, media_km, path_csv):
    with open(path_csv, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=';')
        for riga in csv_reader:
            try:
                KM_FINE = riga['Punto finale SI'].replace(',', '.')
                KM_INI = riga['Punto iniziale SI'].replace(',', '.')
                if float(KM_FINE) > float(KM_INI):
                    if riga["Sede Tecnica"] == sede_tecnica and riga[
                        'Codice caratteristica'] == 'S01500_0010' and media_km < float(KM_FINE) and media_km > float(
                            KM_INI):
                        return riga['Valore car.']
                elif float(KM_FINE) < float(KM_INI):
                    if riga["Sede Tecnica"] == sede_tecnica and riga[
                        'Codice caratteristica'] == 'S01500_0010' and media_km > float(KM_FINE) and media_km < float(
                            KM_INI):
                        return riga['Valore car.']
            except:
                arcpy.AddMessage(sys.exc_info()[0])
                return sede_tecnica


def creo_excel():
    path = g_ESRI_variable_68
    tabella_eventi = arcpy.CreateTable_management(str(path), "event_table.dbf")
    arcpy.AddField_management(tabella_eventi, "SEDE_TEC", "Text", 50, "", "", "", "NULLABLE", "REQUIRED")
    arcpy.AddField_management(tabella_eventi, "SETE", "Text", 50, "", "", "", "NULLABLE", "REQUIRED")
    arcpy.AddField_management(tabella_eventi, "KM_INIZIO", "DOUBLE", "", "", "", "", "NULLABLE", "REQUIRED")
    arcpy.AddField_management(tabella_eventi, "KM_FINE", "DOUBLE", "", "", "", "", "NULLABLE", "REQUIRED")
    arcpy.AddField_management(tabella_eventi, "DISTANZA", "Text", 50, "", "", "", "NULLABLE", "REQUIRED")
    arcpy.AddField_management(tabella_eventi, "LATO_DI_PO", "Text", 50, "", "", "", "NULLABLE", "REQUIRED")
    return tabella_eventi


def aggiungo_riga_excel(riga, tabella_eventi):
    fields = ['SEDE_TEC', 'SETE', 'KM_INIZIO', 'KM_FINE', 'DISTANZA', 'LATO_DI_PO']
    cursor = arcpy.da.InsertCursor(tabella_eventi, fields)
    cursor.insertRow(riga)
    del cursor
    return True


def controllo_chilometriche(sede_tecnica, tipologia, km_inizio, km_fine, path_csv):
    with open(path_csv, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=';')
        i = km_fine
        caratteristica = ''
        boolean = False
        print('chilometro inizio controllo chilometriche: ' + km_inizio)
        print('chilometro fine controllo chilometriche: ' + km_fine)
        for riga in csv_reader:
            try:
                if riga['Punto iniziale SI'].replace(',', '.') > riga['Punto finale SI'].replace(',', '.'):
                    KM_INI = riga['Punto finale SI'].replace(',', '.')
                    KM_FIN_DISTANZA = riga['Punto iniziale SI'].replace(',', '.')
                elif riga['Sede Tecnica'] == sede_tecnica:
                    KM_FIN_DISTANZA = riga['Punto finale SI'].replace(',', '.')
                    KM_INI = riga['Punto iniziale SI'].replace(',', '.')

                if riga['Sede Tecnica'] == sede_tecnica and riga['Codice caratteristica'] == tipologia and float(
                        km_fine) > float(KM_FIN_DISTANZA) and float(km_inizio) < float(
                        KM_FIN_DISTANZA) and km_fine != KM_FIN_DISTANZA:
                    print
                    i
                    if i > KM_FIN_DISTANZA:
                        i = KM_FIN_DISTANZA
                        caratteristica = riga['Valore car. Numerico']
                        boolean = True
            except:
                arcpy.AddMessage(sys.exc_info()[0])
                return sede_tecnica
        if boolean == True:
            lista_caratteristiche = [i, caratteristica]
            return lista_caratteristiche
        else:
            return False


def creoExcel(path_csv):
    tabella_eventi = creo_excel()
    print('sono entrata nel metodo')
    with open(path_csv, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=';')
        SEDI_TECNICHE = []
        global SEDI_TECNICHE
        for riga in csv_reader:
            print('sono entrata la prima volta')
            if riga["Sede Tecnica"] not in SEDI_TECNICHE:
                print('sono in controllo sede_tecniche')
                SEDI_TECNICHE.append(riga["Sede Tecnica"])
                sede_tecnica = riga["Sede Tecnica"]
                print(riga['Codice caratteristica'])
                with open(path_csv, 'r') as csv_file:
                    csv_reader_2 = csv.DictReader(csv_file, delimiter=';')
                    for riga in csv_reader_2:
                        if riga['Codice caratteristica'] == 'S01500_0020' and riga['Sede Tecnica'] == sede_tecnica:
                            try:
                                print(' sono in caratteristica lato di posa')
                                print(riga['Sede Tecnica'])
                                KM_INI = riga['Punto iniziale SI'].replace(',', '.')
                                KM_FINE = riga['Punto finale SI'].replace(',', '.')
                                if KM_INI > KM_FINE:
                                    x = KM_INI
                                    KM_INI = KM_FINE
                                    KM_FINE = x
                                media_km = (float(KM_INI) + float(KM_FINE)) / 2
                                sete = controllo_binario(sede_tecnica, media_km, path_csv)
                                if sete == sede_tecnica:
                                    tabella_errori.append(riga['Sede Tecnica'])
                                    break
                                print('KM_FINE LATO DI POSA ' + KM_FINE)
                                risultato = controllo_chilometriche(sede_tecnica, 'S01500_0030', KM_INI, KM_FINE,
                                                                    path_csv)
                                if risultato == sede_tecnica:
                                    tabella_errori.append(riga['Sede Tecnica'])
                                    break
                            except:
                                arcpy.AddMessage(sys.exc_info()[0])
                                tabella_errori.append(riga['Sede Tecnica'])
                                break
                            if risultato == False:
                                distanza = controllo_distanza(sede_tecnica, media_km, path_csv)
                                if distanza == sede_tecnica:
                                    break
                                try:
                                    riga_tabella = [riga['Sede Tecnica'], sete, float(KM_INI.replace(',', '.')),
                                                    float(KM_FINE.replace(',', '.')), distanza.replace(',', '.'),
                                                    riga['Valore car.']]
                                    print('  riga tabella se non e presente un intervallo minore')
                                    riga_excel = aggiungo_riga_excel(riga_tabella, tabella_eventi)
                                except:
                                    arcpy.AddMessage(sys.exc_info()[0])
                                    tabella_errori.append(riga['Sede Tecnica'])
                                    break
                            else:
                                KM_INIZIO = KM_INI
                                contatore = 0
                                while risultato != False:
                                    contatore = contatore + 1
                                    print(contatore)
                                    KM_FIN = risultato[0]
                                    try:
                                        riga_tabella = [riga['Sede Tecnica'], sete, float(KM_INIZIO.replace(',', '.')),
                                                        float(KM_FIN.replace(',', '.')), risultato[1].replace(',', '.'),
                                                        riga['Valore car.']]
                                        print(riga_tabella)
                                        print('  riga tabella se è presente un intervallo minore')
                                        riga_excel = aggiungo_riga_excel(riga_tabella, tabella_eventi)
                                        print(KM_FIN)
                                        KM_INIZIO = KM_FIN
                                        risultato = controllo_chilometriche(sede_tecnica, 'S01500_0030', KM_INIZIO,
                                                                            KM_FINE, path_csv)
                                        if risultato == sede_tecnica:
                                            break
                                        print(KM_FINE)
                                    except:
                                        arcpy.AddMessage(sys.exc_info()[0])
                                        tabella_errori.append(riga['Sede Tecnica'])
                                        break
                                try:
                                    media_km = (float(KM_INIZIO.replace(',', '.')) + float(KM_FINE)) / 2
                                    print(media_km)
                                    distanza = controllo_distanza(sede_tecnica, media_km, path_csv)
                                    if distanza == sede_tecnica:
                                        break
                                    print(distanza)
                                except:
                                    arcpy.AddMessage(sys.exc_info()[0])
                                    tabella_errori.append(riga['Sede Tecnica'])
                                    break
                                try:
                                    riga_tabella = [riga['Sede Tecnica'], sete, float(KM_INIZIO.replace(',', '.')),
                                                    float(KM_FINE.replace(',', '.')), distanza.replace(',', '.'),
                                                    riga['Valore car.']]
                                    print(riga_tabella)
                                    riga_excel = aggiungo_riga_excel(riga_tabella, tabella_eventi)
                                    print('  riga tabella quando finisce il ciclo')
                                except:
                                    arcpy.AddMessage(sys.exc_info()[0])
                                    tabella_errori.append(riga['Sede Tecnica'])
                                    break
        return tabella_eventi


# ------------------

# -------------copy to parallel
# ------- Copying Parallel To Line Feature Tool LEFT-SIDE -------
def CopyParallelL(plyP, sLength):
    part = plyP.getPart(0)
    lArray = arcpy.Array()
    for ptX in part:
        dL = plyP.measureOnLine(ptX)
        ptX0 = plyP.positionAlongLine(dL - 0.01).firstPoint
        ptX1 = plyP.positionAlongLine(dL + 0.01).firstPoint
        dX = float(ptX1.X) - float(ptX0.X)
        dY = float(ptX1.Y) - float(ptX0.Y)
        lenV = math.hypot(dX, dY)
        sX = -dY * sLength / lenV;
        sY = dX * sLength / lenV
        leftP = arcpy.Point(ptX.X + sX, ptX.Y + sY)
        lArray.add(leftP)
    array = arcpy.Array([lArray])
    section = arcpy.Polyline(array)
    return section


# ----------------------------------------------------------------

# ------- Copying Parallel To Line Feature Tool RIGHT-SIDE -------
def CopyParallelR(plyP, sLength):
    part = plyP.getPart(0)
    rArray = arcpy.Array()
    for ptX in part:
        dL = plyP.measureOnLine(ptX)
        ptX0 = plyP.positionAlongLine(dL - 0.01).firstPoint
        ptX1 = plyP.positionAlongLine(dL + 0.01).firstPoint
        dX = float(ptX1.X) - float(ptX0.X)
        dY = float(ptX1.Y) - float(ptX0.Y)
        lenV = math.hypot(dX, dY)
        sX = -dY * sLength / lenV;
        sY = dX * sLength / lenV
        rightP = arcpy.Point(ptX.X - sX, ptX.Y - sY)
        rArray.add(rightP)
    array = arcpy.Array([rArray])
    section = arcpy.Polyline(array)
    return section


def controllo_sete(SETE, binari):
    sede_tecnica_binario = []
    risultato = [row[0] for row in
                 arcpy.da.SearchCursor(binari, ("SEDE_TECNI"), " \"SEDE_TECNI\" = " + "'" + SETE + "'")]
    if len(risultato) > 0:
        return True
    else:
        return False
    ######################################################## MAIN ########################################################


def copyParallel(cavidotto, binari):
    infc = cavidotto
    count = 0
    lista_errori = []
    lista_errori = []
    with arcpy.da.UpdateCursor(infc, ("Shape@", "Distanza", "Lato_di_po", "SETE")) as cursor:
        for shp, d, l, s in cursor:
            # qui devi fare un controllo per la km
            try:
                if l == "DX":
                    DrawLine = CopyParallelR(shp, float(d))
                if l == "SX":
                    DrawLine = CopyParallelL(shp, float(d))
                cursor.updateRow((DrawLine, d, l, s))
            except:
                cursor.deleteRow()
                lista_errori.append(s)
    return lista_errori


######################################################################################################################


# -----------------------------
# Script arguments
def procedura_cavidotti(n_id, ROUTE_BIN_C_shp, V_ASSET_S16000_shp, output, INFR_RT_ESTENSIONE_L_shp, INFR_RT_dbf,
                        INFR_RT_INFR_RT_TR_dbf, INFR_RT_INFR_RT_TY_dbf, path_csv, CAVIDOTTI_DB):
    try:
        tabella_errori = []
        global tabella_errori
        Campo_univoco_MDR = g_ESRI_variable_44  # provide a default value if unspecified
        # KM_INIZIO_MDR = "KM__INIZIO" # provide a default value if unspecified
        KM_INIZIO_MDR = g_ESRI_variable_45  # provide a default value if unspecified
        # KM_FINE_MDR_ = "KM__FINE" # provide a default value if unspecified
        KM_FINE_MDR_ = g_ESRI_variable_46  # provide a default value if unspecified
        KM_INIZIO_EV_TABLE = "KM_INIZIO"  # provide a default value if unspecified
        KM_FINE_EV_TABLE = "KM_FINE"  # provide a default value if unspecified
        Field_univoco_EVENT_TABLE = g_ESRI_variable_44  # provide a default value if unspecified # provide a default value if unspecified
        ROUTE_BIN_C_Layer = g_ESRI_variable_47
        event_table = ""
        CREATE_ROUTES = g_ESRI_variable_48
        risultato_segmentazione = g_ESRI_variable_49
        ROUTE_BIN_C = arcpy.CopyFeatures_management(ROUTE_BIN_C_shp, g_ESRI_variable_50)
        V_ASSET_S16000 = arcpy.CopyFeatures_management(V_ASSET_S16000_shp, g_ESRI_variable_51)
        # arcpy.JoinField_management(ROUTE_BIN_C, "SETE", V_ASSET_S16000, "SEDE_TECNICA", "SEDE_TECNICA;KM_INI;KM_FIN;S16000_0010")
        arcpy.JoinField_management(ROUTE_BIN_C, g_ESRI_variable_44, V_ASSET_S16000, g_ESRI_variable_52,
                                   g_ESRI_variable_53)
        # arcpy.JoinField_management(ROUTE_BIN_C_shp, "SETE", V_ASSET_S16000_shp, "SEDE_TECNICA", "SEDE_TECNICA;KM_INI;KM_FIN;S16000_0010")
        # Process: Make Feature Layer (2)
        # arcpy.FeatureClassToShapefile_conversion(ROUTE_BIN_C_shp,output)
        ROUTE_BIN_C_Layer = arcpy.MakeFeatureLayer_management(ROUTE_BIN_C, ROUTE_BIN_C_Layer)
        fields = (arcpy.ListFields(ROUTE_BIN_C_Layer))
        # for field in fields:
        # arcpy.AddMessage(field.name)
        n_record_join = arcpy.GetCount_management(ROUTE_BIN_C_Layer)
        # arcpy.AddMessage('n_record_join'+n_record_join.getOutput(0))
        # arcpy.FeatureClassToShapefile_conversion(ROUTE_BIN_C_Layer,r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni')
        # arcpy.AddMessage(arcpy.ListFields(ROUTE_BIN_C_Select))
        # arcpy.SelectLayerByAttribute_management(ROUTE_BIN_C_Layer, "NEW_SELECTION", "S16000_0010 = 'U' OR S16000_0010= 'D'")
        arcpy.SelectLayerByAttribute_management(ROUTE_BIN_C_Layer, "NEW_SELECTION", g_ESRI_variable_54)
        # arcpy.SelectLayerByAttribute_management(ROUTE_BIN_C_Layer, "NEW_SELECTION", "MUIF.INE_LIVE_S16000.S16000_0010 ='UNICO' OR MUIF.INE_LIVE_S16000.S16000_0010='DISPARI'")
        # Process: Feature Class To Shapefile (multiple)

        ROUTE_BIN_C_Select = arcpy.CopyFeatures_management(ROUTE_BIN_C_Layer, g_ESRI_variable_55)
        n_record_select = arcpy.GetCount_management(ROUTE_BIN_C_Select)
        arcpy.AddMessage('n_record_select' + n_record_select.getOutput(0))

        # path_csv=r'C:\Users\S.RAGNI\Desktop\pacchetto_INFR_RT\Appoggio\ExportSETE_S01500_20210618_AGGIORNATO.CSV'

        # arcpy.FeatureClassToShapefile_conversion(ROUTE_BIN_C_Select,output)
        # Process: Create Routes
        try:
            arcpy.AddMessage('ho fatto la create route')
            event_table = creoExcel(path_csv)
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nella creazione tabella eventi ' + str(ex))
        try:
            arcpy.AddMessage('sono andato nella create route')
            arcpy.CreateRoutes_lr(ROUTE_BIN_C_Select, Campo_univoco_MDR, g_ESRI_variable_48, "TWO_FIELDS",
                                  KM_INIZIO_MDR, KM_FINE_MDR_, "UPPER_LEFT", "1", "0", "IGNORE", "INDEX")
            n_record_create_routes = arcpy.GetCount_management(ROUTE_BIN_C_Select)
            arcpy.AddMessage('n_record_create_routes:  ' + n_record_create_routes.getOutput(0))
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nella create Route ' + str(ex))

        # arcpy.FeatureClassToShapefile_conversion(ROUTE_BIN_C_Select,r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni')

        # Process: Make Route Event Layer
        try:
            n_record_create_routes = arcpy.GetCount_management(CREATE_ROUTES)
            arcpy.AddMessage('n_record_create_routes:  ' + n_record_create_routes.getOutput(0))
            arcpy.AddMessage(
                Campo_univoco_MDR + ' - ' + Field_univoco_EVENT_TABLE + ' - ' + KM_INIZIO_EV_TABLE + ' - ' + KM_FINE_EV_TABLE)
            risultato_segmentazione = arcpy.MakeRouteEventLayer_lr(CREATE_ROUTES, Campo_univoco_MDR, event_table,
                                                                   Field_univoco_EVENT_TABLE + " LINE  " + KM_INIZIO_EV_TABLE + " " + KM_FINE_EV_TABLE,
                                                                   risultato_segmentazione, "", "", "", "", "", "", "")
            n_record_segmentazione_dinamica = arcpy.GetCount_management(risultato_segmentazione)
            arcpy.AddMessage('n_record_segmentazione:  ' + n_record_segmentazione_dinamica.getOutput(0))
            arcpy.AddMessage('Fine segmentazione')
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nella segmentazione ' + str(ex))
        # arcpy.FeatureClassToShapefile_conversion(segmentazione_dinamica,r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni')
        # Process: CopyToParallel
        try:
            arcpy.CopyFeatures_management(risultato_segmentazione, g_ESRI_variable_56)
            arcpy.FeatureClassToShapefile_conversion(risultato_segmentazione, g_ESRI_variable_68)
            cavidotti = g_ESRI_variable_57
            # n_record_copy_feature=arcpy.GetCount_management(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni\Risultato_segmentazione.shp')
            # arcpy.AddMessage('n_record segmentazione dinamica feature class to shapefile :  '+n_record_copy_feature.getOutput(0))
            # n_record_copy_man=arcpy.GetCount_management(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni\Risultato_segmentazione_test.shp')
            # arcpy.AddMessage('n_record segmentazione dinamica copy feature :  '+n_record_copy_man.getOutput(0))
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nel feature class to shapefile della segmentazione ' + str(ex))
            arcpy.AddMessage(sys.exc_info()[0])
        try:
            # sete_assenti_2=copyParallel(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni\Risultato_segmentazione_test.shp',ROUTE_BIN_C_Select)
            sete_assenti = copyParallel(cavidotti, ROUTE_BIN_C_Select)
            logger.info('lista sete errori chilometriche:' + str(tabella_errori))
            logger.info('lista sete assenti:' + str(sete_assenti))
            arcpy.AddMessage('lista sete errori chilometriche: ')
            arcpy.AddMessage(tabella_errori)
            arcpy.AddMessage('lista sete assenti: ')
            arcpy.AddMessage(sete_assenti)
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nel copy parallel ' + str(ex))
            arcpy.AddMessage(sys.exc_info()[1])
        try:
            # arcpy.AddMessage('sono andato nel copy features per INFR_RT_ESTENSIONE_L ')
            # INFR_RT_ESTENSIONE_L =arcpy.CopyFeatures_management(cavidotti,'in_memory/INFR_RT_ESTENSIONE_L')
            INFR_RT_ESTENSIONE_L = arcpy.MultipartToSinglepart_management(cavidotti, g_ESRI_variable_58)
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nel copy features per INFR_RT_ESTENSIONE_L ' + str(ex))
            arcpy.AddMessage(sys.exc_info()[1])
        # Process: Join Field
        # arcpy.JoinField_management(INFR_RT_ESTENSIONE_L, "SETE", ROUTE_BIN_C_Select , "SETE", "S16000_0010")
        try:
            # arcpy.AddMessage('sono andato nel valorizzazione campi per INFR_RT_ESTENSIONE_L ')
            # Process: Join Field (3)
            arcpy.JoinField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_44, INFR_RT_ESTENSIONE_L_shp,
                                       g_ESRI_variable_5, "")

            # Process: Join Field (2)
            arcpy.JoinField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_5, INFR_RT_dbf, g_ESRI_variable_4, "")

            # Process: Join Field (3)
            arcpy.JoinField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_5, INFR_RT_INFR_RT_TR_dbf,
                                       g_ESRI_variable_5, "")

            # Process: Join Field (4)
            arcpy.JoinField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_5, INFR_RT_INFR_RT_TY_dbf,
                                       g_ESRI_variable_5, "")

            # Process: Calculate Field
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_5, g_ESRI_variable_59, "PYTHON_9.3",
                                            "i =0" + "\\ndef autoIncrement():\\n   global i;\\n   iStart = 1\\n   iInterval = 1\\n   if( i == 0 ):\\n      i = iStart\\n   else:\\n     i=i+ iInterval\\n   return i")
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_4, g_ESRI_variable_7, "PYTHON_9.3",
                                            "")
            # Process: Calculate Field (4)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_8, g_ESRI_variable_60, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (5)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_10, g_ESRI_variable_11, "PYTHON_9.3",
                                            "")
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_12, g_ESRI_variable_13, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (8)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_14, g_ESRI_variable_15, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (7)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_16, g_ESRI_variable_17, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (6)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_18, g_ESRI_variable_19, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (5)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_20, g_ESRI_variable_11, "PYTHON_9.3",
                                            "")

            # Process: Calculate Field (4)
            arcpy.CalculateField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_21, g_ESRI_variable_19, "PYTHON_9.3",
                                            "")
            INFR_RT_DBF = arcpy.management.CopyRows(INFR_RT_ESTENSIONE_L, g_ESRI_variable_61)
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nella valorizzazione campi di INFR_RT_ESTENSIONE_L ' + str(ex))
        try:
            # arcpy.Delete_management(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni\Risultato_segmentazione.shp')
            # arcpy.Delete_management(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\connessioni\event_table.dbf')
            arcpy.DeleteField_management(INFR_RT_ESTENSIONE_L, g_ESRI_variable_62)
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore nella valorizzazione campi dbf di INFR_RT_ESTENSIONE_L ' + str(ex))
            arcpy.AddMessage(sys.exc_info()[0])
        try:
            arcpy.FeatureClassToShapefile_conversion(INFR_RT_ESTENSIONE_L, output)
            arcpy.DeleteRows_management(CAVIDOTTI_DB)
            # INFR_RT_ESTENSIONE_L_FINALE=os.path.join(output,"INFR_RT_ESTENSIONE_L.shp")
            # INFR_RT_ESTENSIONE_L_Project=arcpy.Project_management(INFR_RT_ESTENSIONE_L,INFR_RT_ESTENSIONE_L_FINALE,"PROJCS['RDN2008_Italy_zone',GEOGCS['GCS_RDN2008',DATUM['D_Rete_Dinamica_Nazionale_2008',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',7000000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',12.0],PARAMETER['Scale_Factor',0.9985],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "", "", "NO_PRESERVE_SHAPE", "", "NO_VERTICAL")
            arcpy.DeleteField_management(output + "\INFR_RT_ESTENSIONE_L.shp", g_ESRI_variable_40)
            arcpy.Append_management(INFR_RT_ESTENSIONE_L, CAVIDOTTI_DB, "NO_TEST")
        except Exception as ex:
            arcpy.AddMessage('sono andato in errore creazione shapefile risultato ' + str(ex))
        result = [output + "\INFR_RT_ESTENSIONE_L.shp", INFR_RT_DBF]
        return result
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        arcpy.AddMessage(ex)
        logging.error('Errore nella connessione al database ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                            exc_tb.tb_lineno))
        logger.error('Errore nella connessione al database ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                           exc_tb.tb_lineno))
        sys.exit(1)


# ___________________________________________________________________________________


def append(INFR_RT, INFR_RT_ESTENSIONE_P, INFR_RT_INFR_RT_TR, INFR_RT_INFR_RT_TY, INFR_RT_SIMS,
           INFR_RT_ESTENSIONE_P_SIMS, INFR_RT_ESTENSIONE_L_dbf, output, meta):
    try:
        # output_meta=os.path.join(output,"META.shp")
        # meta_Finale=arcpy.CopyFeatures_management(meta,output_meta)
        output_meta = os.path.join(output, "META.shp")
        meta_in_memory = arcpy.CopyFeatures_management(meta, g_ESRI_variable_63)
        meta_Finale = arcpy.Project_management(meta_in_memory, output_meta,
                                               "PROJCS['RDN2008_Italy_zone',GEOGCS['GCS_RDN2008',DATUM['D_Rete_Dinamica_Nazionale_2008',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',7000000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',12.0],PARAMETER['Scale_Factor',0.9985],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",
                                               "", "", "NO_PRESERVE_SHAPE", "", "NO_VERTICAL")
        arcpy.Append_management(INFR_RT_SIMS, INFR_RT, "NO_TEST")
        arcpy.Append_management(INFR_RT_SIMS, INFR_RT_INFR_RT_TY, "NO_TEST")
        arcpy.Append_management(INFR_RT_SIMS, INFR_RT_INFR_RT_TR, "NO_TEST")
        arcpy.Append_management(INFR_RT_ESTENSIONE_P_SIMS, INFR_RT_ESTENSIONE_P, "NO_TEST")
        arcpy.Append_management(INFR_RT_ESTENSIONE_L_dbf, INFR_RT_INFR_RT_TY, "NO_TEST")
        arcpy.Append_management(INFR_RT_ESTENSIONE_L_dbf, INFR_RT_INFR_RT_TR, "NO_TEST")
        arcpy.Append_management(INFR_RT_ESTENSIONE_L_dbf, INFR_RT, "NO_TEST")
        arcpy.DeleteField_management(INFR_RT, g_ESRI_variable_40)
        # arcpy.FeatureClassToShapefile_conversion(INFR_RT_ESTENSIONE_P,output)
        INFR_RT_ESTENSIONE_P_FINALE = os.path.join(output, "INFR_RT_ESTENSIONE_P.shp")
        INFR_RT_ESTENSIONE_P_Project = arcpy.Project_management(INFR_RT_ESTENSIONE_P, INFR_RT_ESTENSIONE_P_FINALE,
                                                                "PROJCS['RDN2008_Italy_zone',GEOGCS['GCS_RDN2008',DATUM['D_Rete_Dinamica_Nazionale_2008',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',7000000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',12.0],PARAMETER['Scale_Factor',0.9985],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",
                                                                "", "", "NO_PRESERVE_SHAPE", "", "NO_VERTICAL")
        arcpy.TableToTable_conversion(INFR_RT, output, "INFR_RT.dbf")
        arcpy.TableToTable_conversion(INFR_RT_INFR_RT_TY, output, "INFR_RT_INFR_RT_TY.dbf")
        arcpy.TableToTable_conversion(INFR_RT_INFR_RT_TR, output, "INFR_RT_INFR_RT_TR.dbf")
        arcpy.DeleteField_management(output + "\\INFR_RT_ESTENSIONE_P.shp", g_ESRI_variable_40)
        # arcpy.DeleteField_management(output+"\\INFR_RT_ESTENSIONE_L.shp","CLASSREF_1")
        arcpy.DeleteField_management(output + "\\INFR_RT_ESTENSIONE_P.shp", g_ESRI_variable_64)
        arcpy.DeleteField_management(output + "\\INFR_RT_ESTENSIONE_L.shp", g_ESRI_variable_65)
        arcpy.DeleteField_management(output + "\\INFR_RT.dbf", g_ESRI_variable_40)
        arcpy.DeleteField_management(output + "\\INFR_RT_INFR_RT_TY.dbf", g_ESRI_variable_40)
        arcpy.DeleteField_management(output + "\\INFR_RT_INFR_RT_TR.dbf", g_ESRI_variable_40)
        arcpy.Delete_management(g_ESRI_variable_57)
        arcpy.Delete_management(g_ESRI_variable_66)
        # arcpy.DeleteField_management(output+"\INFR_RT_ESTENSIONE_L.shp", "CLASSID_1")
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error('Errore in append' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        logger.error('Errore in append' + 'main(): Error message {} - Line {}'.format(str(ex), exc_tb.tb_lineno))
        sys.exit(1)


def connection_database(DB_config, path_db, logger):
    try:
        arcpy.CreateDatabaseConnection_management(path_db, "SDE_Connection.sde", 'ORACLE', DB_config[0],
                                                  'DATABASE_AUTH', DB_config[1], DB_config[2])
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error('Errore nella connessione al database ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                            exc_tb.tb_lineno))
        logger.error('Errore nella connessione al database ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                           exc_tb.tb_lineno))
        sys.exit(1)


# ---------------------------------------
def AggiornamentoTabella(tabella, utente, fase, stato, indice, logger):
    try:
        arcpy.AddMessage(fase)
        if fase == 'FASE 1':
            # trovo id
            field = 'ID'
            with arcpy.da.SearchCursor(tabella, field) as cursor:
                indice = 0
                for row in cursor:
                    if int(indice) < int(row[0]):
                        indice = row[0]
            # arcpy.AddMessage(indice)
            # crea record
            valori_riga = ["INFR_RT", utente, datetime.datetime.now(), fase, stato, 'NO', indice + 1]
            fields = ['ELABORAZIO', 'UTENTE', 'DATA_INIZIO', 'AVANZAMENTO', 'STATO', 'TRASMISSIO', 'ID']
            cursor = arcpy.da.InsertCursor(tabella, fields)
            cursor.insertRow(valori_riga)
            del cursor
            return str(indice + 1)
        else:
            # arcpy.AddMessage(indice)
            fields = ['ELABORAZIO', 'UTENTE', 'DATA_INIZIO', 'DATA_FINE', 'AVANZAMENTO', 'STATO', 'TRASMISSIO', 'ID']
            with arcpy.da.UpdateCursor(tabella, fields) as cursor:
                for riga in cursor:
                    if int(indice) == riga[7]:
                        if stato == "ERRORE" or stato == "Completato":
                            arcpy.AddMessage('sono in stato errore')
                            riga[1] = utente
                            riga[3] = datetime.datetime.now()
                            riga[5] = stato
                            riga[6] = "NO"
                        else:
                            # arcpy.AddMessage('indice uguale indice')
                            riga[1] = utente
                            riga[4] = fase
                            riga[5] = stato
                            riga[6] = "NO"
                        cursor.updateRow(riga)
                        del cursor
                        return True
    except Exception as ex:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error("ERRORE aggiornamento tabella avanzamento:" + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                                exc_tb.tb_lineno))
        logger.error('ERRORE aggiornamento tabella avanzamento: ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                                exc_tb.tb_lineno))
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        AggiornamentoTabella(tabella_avanzamento, utente, '', 'ERRORE', id_riga_avanzamento, logger)
        print(json.dumps(data))
        arcpy.AddMessage(json.dumps(data))
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore generico nell esecuzione detto script ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                          exc_tb.tb_lineno))
        sys.exit(1)


def main():
    # ------------
    utente = arcpy.GetParameterAsText(0)
    global utente
    dictLottiMUIF = {"AN00": 5, "BA00": 5, "BO00": 5, "CA00": 1, "FI00": 8, "GE00": 3, "MI00": 8, "NA00": 6, "PA00": 5,
                     "RC00": 4, "RM00": 6, "TO00": 8, "TS00": 2, "VE00": 4, "VR00": 4}
    lista_dtp_muif = ["AN00", "BA00", "BO00", "CA00", "FI00", "GE00", "MI00", "NA00", "PA00", "RC00", "RM00", "TS00",
                      "VE00", "VR00", 'TO00']
    path_output = g_ESRI_variable_67
    arcpy.env.overwriteOutput = True
    path_db = g_ESRI_variable_68
    path_csv = g_ESRI_variable_69
    # Sostituire il seguente path con il path della Feature Class al'interno del GeoDB di Produzione
    # path_db=r'C:\Users\S.RAGNI\Desktop\pacchetto_INFR_RT\output'
    # path_output=r'/opt/arcgisdata/SINFI/Elaborazioni/INFR_RT'
    # path_output=r'\\10.233.71.25\sinfi\Elaborazioni\INFR_RT'
    logger = logging.getLogger(__name__)
    global logger
    logger.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logFileName = os.path.join(path_db + '\\INFR_RT.log')
    logHandler = handlers.TimedRotatingFileHandler(logFileName, when='M', interval=1, backupCount=2)
    log_level = ''
    logHandler.setFormatter(formatter)
    if log_level == 'INFO':
        handler.setLevel(logging.INFO)
        logger.setLevel(logging.INFO)
    elif log_level == 'ERROR':
        handler.setLevel(logging.ERROR)
        logger.setLevel(logging.ERROR)
    logger.addHandler(logHandler)
    logger.info('File log creato con successo')
    DB_config = ["MUARPRO_DG", "muif", "mu1f_arcG1s0503"]
    connection_database(DB_config, path_db, logger)
    logger.info('connessione al database')
    arcpy.AddMessage('connessione al database')

    tabella_avanzamento = path_db + "\\SDE_Connection.sde\\" + r"\MUIF.SINFI_ELABORAZIONI_INFR_RT"
    global tabella_avanzamento
    # MUIF
    path_FC_LO = path_db + "\\SDE_Connection.sde\\" + r"\MUIF.MDR\MUIF.LOCALITA"
    PATH_FC_PALO = path_db + "\\SDE_Connection.sde\\" + r"\MUIF.DBGT\\MUIF.PALO"
    MUIF_V_ASSET = path_db + "\\SDE_Connection.sde\\" + r"MUIF.V_ASSET_S16000"
    MUIF_ROUTE_BIN_C = path_db + "\\SDE_Connection.sde\\" + r"MUIF.MDR_SEG\MUIF.ROUTE_BIN_C"
    # template
    INFR_RT_ESTENSIONE_P_shp_template = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI\MUIF.INFR_RT_ESTENSIONE_P_tem"
    INFR_RT_dbf_template = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI_INFR_RT_tem"
    INFR_RT_INFR_RT_TR_dbf_template = path_db + "\\SDE_Connection.sde\\" + r"\MUIF.SINFI_INFR_RT_INFR_RT_TR_tem"
    INFR_RT_INFR_RT_TY_dbf_template = path_db + "\\SDE_Connection.sde\\" + r"\MUIF.SINFI_INFR_RT_INFR_RT_TY_tem"
    INFR_RT_ESTENSIONE_L_shp_template = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI\MUIF.INFR_RT_ESTENSIONE_L_tem"
    CAVIDOTTI_DB = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI\MUIF.INFR_RT_ESTENSIONE_L"
    # SIMS
    INFR_RT_SIMS = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI_INFR_RT_SIMS"
    INFR_RT_ESTENSIONE_P_SIMS = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI\MUIF.INFR_RT_ESTENSIONE_P_sims"
    INFR_RT_INFR_RT_TR_SIMS = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI_INFR_RT_INFR_RT_TR_sims"
    INFR_RT_INFR_RT_TY_SIMS = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI_INFR_RT_INFR_RT_TY_sims"
    DTP_shp = path_db + "\\SDE_Connection.sde\\" + r"MUIF.SINFI\MUIF.DTP_1"
    meta = path_db + "\\SDE_Connection.sde\\" + r"\SINFI\MUIF.META"
    # meta=r'C:\Users\S.RAGNI\Desktop\SINFI\SCRIPT_RILASCIO_CERTIFICAZIONE_NOVEMBRE\META\Temp.gdb\META'
    id_riga_avanzamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 1', 'In corso', 0, logger)
    # arcpy.AddMessage('sono confusa')
    data = datetime.datetime.now()
    nome_cartella = data.strftime("%d") + data.strftime("%m") + data.strftime("%Y") + '_' + id_riga_avanzamento
    path = os.path.join(path_output, nome_cartella)
    os.mkdir(path)
    # arcpy.AddMessage(path)
    global id_riga_avanzamento
    listaDTPMUIF = VerificaDTPComplete_MUIF(dictLottiMUIF, path_FC_LO)
    logger.info('Verifica DTP complete')
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 2', 'In corso', id_riga_avanzamento, logger)
    result_MUIF = INFR_RT_MUIF(listaDTPMUIF, PATH_FC_PALO, INFR_RT_ESTENSIONE_P_shp_template, INFR_RT_dbf_template,
                               INFR_RT_INFR_RT_TR_dbf_template, INFR_RT_INFR_RT_TY_dbf_template)
    logger.info('INFR_RT_MUIF')
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 3', 'In corso', id_riga_avanzamento, logger)
    # CAVIDOTTI
    # path_csv=os.path.join(r'\\rfiappmuf17le.rfiservizi.corp\agsgeoproc\SINFI\csv_cavidotti',r'\Export_AssetS01500.csv')
    # path_csv=os.path.join(r'\\10.233.71.25\SINFI',r'csv_cavidotti\ExportSETE_S01500_20210618_AGGIORNATO.CSV')

    # n_id=20882

    arcpy.AddMessage("Lista delle DTP complete sul MUIF: \n" + str(listaDTPMUIF))
    dtp_mancanti = trovo_dtp_mancanti(lista_dtp_muif, listaDTPMUIF)
    logger.info('Trovo DTP mancanti')
    result_SIMS = INFR_RT_SIMS_INE(INFR_RT_SIMS, INFR_RT_ESTENSIONE_P_SIMS, INFR_RT_INFR_RT_TR_SIMS,
                                   INFR_RT_INFR_RT_TY_SIMS, DTP_shp, 0, dtp_mancanti)
    logger.info('result_SIMS')
    # parametri cavidotti
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 4', 'In corso', id_riga_avanzamento, logger)
    V_ASSET_S16000 = arcpy.CopyFeatures_management(MUIF_V_ASSET, g_ESRI_variable_70)
    ROUTE_BIN_C_MUIF = arcpy.CopyFeatures_management(MUIF_ROUTE_BIN_C, g_ESRI_variable_71)
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 5', 'In corso', id_riga_avanzamento, logger)
    result_cavidotti = procedura_cavidotti(result_SIMS[2], ROUTE_BIN_C_MUIF, V_ASSET_S16000, path,
                                           INFR_RT_ESTENSIONE_L_shp_template, INFR_RT_dbf_template,
                                           INFR_RT_INFR_RT_TR_dbf_template, INFR_RT_INFR_RT_TY_dbf_template, path_csv,
                                           CAVIDOTTI_DB)
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 6', 'In corso', id_riga_avanzamento, logger)
    logger.info('result cavidotti')
    # append(result_MUIF[1],result_MUIF[0],result_MUIF[2],result_MUIF[3],result_SIMS[0],result_SIMS[1],result_cavidotti[1],output)
    append(result_MUIF[1], result_MUIF[0], result_MUIF[2], result_MUIF[3], result_SIMS[0], result_SIMS[1],
           result_cavidotti[1], path, meta)
    logger.info('append')
    deletetxt(path, logger)
    aggiornamento = AggiornamentoTabella(tabella_avanzamento, utente, 'FASE 6', 'Completato', id_riga_avanzamento,
                                         logger)
    data = {}
    data['risultato'] = []
    data['risultato'].append({
        'procedura': 'INFR_RT',
        'risultato': 'TRUE',
        'message': 'la procedura ha terminato senza errori'
    })
    arcpy.AddMessage(json.dumps(data))
    arcpy.SetParameterAsText(1, json.dumps(data))


# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    try:
        main()
    except Exception as ex:
        data = {}
        data['risultato'] = []
        data['risultato'].append({
            'procedura': 'INFR_RT',
            'risultato': 'FALSE',
            'message': 'Si è verificato un errore durante l \'esecuzione della procedura'
        })
        arcpy.AddMessage(json.dumps(data))
        arcpy.AddMessage(ex)
        arcpy.SetParameterAsText(1, json.dumps(data))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        logging.error(
            'Errore generico nell esecuzione detto script ' + 'main(): Error message {} - Line {}'.format(str(ex),
                                                                                                          exc_tb.tb_lineno))
        sys.exit(1)








































